{"version":3,"sources":["App.tsx","index.tsx"],"names":["goodsFromServer","SortType","App","state","sortField","isReverse","setSortedGoods","goods","sortedGoods","sort","good1","good2","localeCompare","length","reverse","handleSort","setState","prevState","handleReverse","handleReset","this","className","type","cn","onClick","map","good","Component","ReactDOM","render","document","getElementById"],"mappings":"4QAKaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EACY,iBADZA,EAEI,eAaJC,E,4MACJC,MAAkB,CAChBC,UAAW,GACXC,WAAW,G,EAGbC,eAAiB,SAACC,EAAD,GAA6D,IAAzCH,EAAwC,EAAxCA,UAAWC,EAA6B,EAA7BA,UACxCG,EAAW,YAAOD,GAiBxB,OAfIH,GACFI,EAAYC,MAAK,SAACC,EAAOC,GACvB,OAAQP,GACN,KAAKH,EACH,OAAOS,EAAME,cAAcD,GAE7B,KAAKV,EACH,OAAOS,EAAMG,OAASF,EAAME,OAE9B,QACE,OAAO,MAKXR,EACKG,EAAYM,UAGdN,G,EAGTO,WAAa,SAACX,GACZ,EAAKY,UAAS,SAACC,GAAD,MAAgB,CAC5Bb,UAAWa,EAAUb,YAAcA,EAAY,GAAKA,O,EAIxDc,cAAgB,WACd,EAAKF,UAAS,SAACC,GAAD,MAAgB,CAC5BZ,WAAYY,EAAUZ,e,EAI1Bc,YAAc,WACZ,EAAKH,SAAS,CACZZ,UAAW,GACXC,WAAW,K,4CAIf,WAAU,IAAD,OACP,EAAiCe,KAAKjB,MAA9BC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,UACbE,EAAQa,KAAKd,eAAeN,EAAiB,CACjDI,YACAC,cAGF,OACE,sBAAKgB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,iBAAkB,CAC9B,WAAYnB,IAAcH,IAE5BuB,QAAS,kBAAM,EAAKT,WAAWd,IALjC,iCAUA,wBACEqB,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,WAAYnB,IAAcH,IAE5BuB,QAAS,kBAAM,EAAKT,WAAWd,IALjC,4BAUA,wBACEqB,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CAAE,YAAalB,IAClDmB,QAASJ,KAAKF,cAHhB,sBAQEd,GAAaC,IACb,wBACEiB,KAAK,SACLD,UAAU,4BACVG,QAASJ,KAAKD,YAHhB,sBASJ,6BACGZ,EAAMkB,KAAI,SAACC,GAAD,OACT,oBAAe,UAAQ,OAAvB,SACGA,GADMA,e,GApGHC,aA8GHzB,IC5If0B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.80bee6e1.chunk.js","sourcesContent":["import { Component } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst SortType = {\n  ALPHABETICALLY: 'sortByAlphabet',\n  LENGTH: 'sortByLength',\n};\n\ninterface SortOptions {\n  sortField: string;\n  isReverse: boolean;\n}\n\ninterface AppState {\n  sortField: string;\n  isReverse: boolean;\n}\n\nclass App extends Component<{}, AppState> {\n  state: AppState = {\n    sortField: '',\n    isReverse: false,\n  };\n\n  setSortedGoods = (goods: string[], { sortField, isReverse }: SortOptions) => {\n    const sortedGoods = [...goods];\n\n    if (sortField) {\n      sortedGoods.sort((good1, good2) => {\n        switch (sortField) {\n          case SortType.ALPHABETICALLY:\n            return good1.localeCompare(good2);\n\n          case SortType.LENGTH:\n            return good1.length - good2.length;\n\n          default:\n            return 0;\n        }\n      });\n    }\n\n    if (isReverse) {\n      return sortedGoods.reverse();\n    }\n\n    return sortedGoods;\n  };\n\n  handleSort = (sortField: string) => {\n    this.setState((prevState) => ({\n      sortField: prevState.sortField === sortField ? '' : sortField,\n    }));\n  };\n\n  handleReverse = () => {\n    this.setState((prevState) => ({\n      isReverse: !prevState.isReverse,\n    }));\n  };\n\n  handleReset = () => {\n    this.setState({\n      sortField: '',\n      isReverse: false,\n    });\n  };\n\n  render() {\n    const { sortField, isReverse } = this.state;\n    const goods = this.setSortedGoods(goodsFromServer, {\n      sortField,\n      isReverse,\n    });\n\n    return (\n      <div className=\"section content\">\n        <div className=\"buttons\">\n          <button\n            type=\"button\"\n            className={cn('button is-info', {\n              'is-light': sortField !== SortType.ALPHABETICALLY,\n            })}\n            onClick={() => this.handleSort(SortType.ALPHABETICALLY)}\n          >\n            Sort alphabetically\n          </button>\n\n          <button\n            type=\"button\"\n            className={cn('button is-success', {\n              'is-light': sortField !== SortType.LENGTH,\n            })}\n            onClick={() => this.handleSort(SortType.LENGTH)}\n          >\n            Sort by length\n          </button>\n\n          <button\n            type=\"button\"\n            className={cn('button is-warning', { 'is-light': !isReverse })}\n            onClick={this.handleReverse}\n          >\n            Reverse\n          </button>\n\n          {(sortField || isReverse) && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={this.handleReset}\n            >\n              Reset\n            </button>\n          )}\n        </div>\n        <ul>\n          {goods.map((good) => (\n            <li key={good} data-cy=\"Good\">\n              {good}\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}